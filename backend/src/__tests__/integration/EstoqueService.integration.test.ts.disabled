/**
 * Testes de Integração do EstoqueService
 * Usa dados reais do seed para validar regras de negócio farmacêuticas
 */

import { TipoMovimentacao } from '@prisma/client';
import { EstoqueService } from '@/application/services/EstoqueService';
import { 
  setupTestDatabase, 
  seedTestData, 
  cleanupTestDatabase, 
  getTestPrisma, 
  TestHelpers 
} from '../setup/testDatabase';

describe('EstoqueService - Integração com Regras Farmacêuticas', () => {
  let estoqueService: EstoqueService;
  let prisma: any;

  beforeAll(async () => {
    prisma = await setupTestDatabase();
    await seedTestData();
    estoqueService = new EstoqueService();
  });

  afterAll(async () => {
    await cleanupTestDatabase();
  });

  beforeEach(async () => {
    // Reset estoque para valores padrão antes de cada teste
    const products = await prisma.produto.findMany();
    for (const product of products) {
      await prisma.produto.update({
        where: { id: product.id },
        data: { estoque: 100 }
      });
    }
    
    // Limpar movimentações
    await prisma.movimentacaoEstoque.deleteMany();
  });

  describe('Movimentações com Regras Farmacêuticas', () => {
    it('deve registrar entrada de medicamento com rastreabilidade', async () => {
      const produto = TestHelpers.getCommonProduct();
      const farmaceutico = TestHelpers.getPharmacist();

      const resultado = await estoqueService.registrarMovimentacao({
        produtoId: produto!.id,
        tipo: TipoMovimentacao.ENTRADA,
        quantidade: 50,
        motivo: 'Recebimento fornecedor - Nota Fiscal 12345',
        observacoes: 'Lote: L2024001 - Validade: 12/2025 - Fabricante: Farmaco Lab',
        usuarioId: farmaceutico!.id
      });

      expect(resultado).toBeDefined();
      expect(resultado.motivo).toBe('Recebimento fornecedor - Nota Fiscal 12345');
      expect(resultado.observacoes).toContain('Lote: L2024001');
      
      // Verificar se estoque foi atualizado
      const produtoAtualizado = await prisma.produto.findUnique({
        where: { id: produto!.id }
      });
      expect(produtoAtualizado.estoque).toBe(150);
    });

    it('deve registrar saída controlada com farmacêutico responsável', async () => {
      const produtoControlado = TestHelpers.getControlledProduct();
      const farmaceutico = TestHelpers.getPharmacist();

      const resultado = await estoqueService.registrarMovimentacao({
        produtoId: produtoControlado!.id,
        tipo: TipoMovimentacao.SAIDA,
        quantidade: 1,
        motivo: 'Venda com receita - Receita 789456',
        observacoes: 'Cliente: João Silva - CPF: 123.456.789-00 - CRM Médico: 54321/SP',
        usuarioId: farmaceutico!.id
      });

      expect(resultado).toBeDefined();
      expect(resultado.tipo).toBe(TipoMovimentacao.SAIDA);
      expect(resultado.observacoes).toContain('CPF:');
      expect(resultado.observacoes).toContain('CRM Médico:');
      
      // Verificar rastro de auditoria
      const movimentacao = await prisma.movimentacaoEstoque.findUnique({
        where: { id: resultado.id },
        include: { usuario: true }
      });
      expect(movimentacao.usuario.tipo).toBe('FARMACEUTICO');
    });

    it('deve impedir saída com estoque insuficiente (regra crítica)', async () => {
      const produto = TestHelpers.getCommonProduct();
      const vendedor = TestHelpers.getSeller();

      // Reduzir estoque para 5
      await prisma.produto.update({
        where: { id: produto!.id },
        data: { estoque: 5 }
      });

      await expect(estoqueService.registrarMovimentacao({
        produtoId: produto!.id,
        tipo: TipoMovimentacao.SAIDA,
        quantidade: 10,
        motivo: 'Venda balcão',
        usuarioId: vendedor!.id
      })).rejects.toThrow('Estoque insuficiente');
    });

    it('deve registrar perda com motivo detalhado (obrigatório ANVISA)', async () => {
      const produto = TestHelpers.getCommonProduct();
      const farmaceutico = TestHelpers.getPharmacist();

      const resultado = await estoqueService.registrarMovimentacao({
        produtoId: produto!.id,
        tipo: TipoMovimentacao.PERDA,
        quantidade: 5,
        motivo: 'Produto vencido - Descarte conforme RDC 222/2018',
        observacoes: 'Data vencimento: 15/01/2024 - Lote: L2023045 - Método descarte: Incineração autorizada',
        usuarioId: farmaceutico!.id
      });

      expect(resultado).toBeDefined();
      expect(resultado.motivo).toContain('RDC 222/2018');
      expect(resultado.observacoes).toContain('Método descarte:');
      
      // Verificar redução do estoque
      const produtoAtualizado = await prisma.produto.findUnique({
        where: { id: produto!.id }
      });
      expect(produtoAtualizado.estoque).toBe(95);
    });

    it('deve registrar ajuste de inventário com justificativa', async () => {
      const produto = TestHelpers.getCommonProduct();
      const gerente = TestHelpers.findUserByType('GERENTE' as any);

      const resultado = await estoqueService.registrarMovimentacao({
        produtoId: produto!.id,
        tipo: TipoMovimentacao.AJUSTE,
        quantidade: -10, // Ajuste negativo
        motivo: 'Inventário mensal - Janeiro 2024',
        observacoes: 'Diferença encontrada no inventário físico vs sistema. Revisado por equipe.',
        usuarioId: gerente!.id
      });

      expect(resultado).toBeDefined();
      expect(resultado.quantidade).toBe(-10);
      expect(resultado.motivo).toContain('Inventário mensal');
      
      // Estoque deve diminuir para 90
      const produtoAtualizado = await prisma.produto.findUnique({
        where: { id: produto!.id }
      });
      expect(produtoAtualizado.estoque).toBe(90);
    });
  });

  describe('Controle de Estoque por Perfil', () => {
    it('farmacêutico deve poder movimentar produtos controlados', async () => {
      const produtoControlado = TestHelpers.getControlledProduct();
      const farmaceutico = TestHelpers.getPharmacist();

      const resultado = await estoqueService.registrarMovimentacao({
        produtoId: produtoControlado!.id,
        tipo: TipoMovimentacao.SAIDA,
        quantidade: 1,
        motivo: 'Dispensação com receita B1',
        usuarioId: farmaceutico!.id
      });

      expect(resultado).toBeDefined();
      expect(resultado.tipo).toBe(TipoMovimentacao.SAIDA);
    });

    it('vendedor não deve poder movimentar ajustes de estoque', async () => {
      const produto = TestHelpers.getCommonProduct();
      const vendedor = TestHelpers.getSeller();

      // Esta regra pode ser implementada no service se necessário
      const resultado = await estoqueService.registrarMovimentacao({
        produtoId: produto!.id,
        tipo: TipoMovimentacao.AJUSTE,
        quantidade: 5,
        motivo: 'Tentativa ajuste não autorizado',
        usuarioId: vendedor!.id
      });

      // Por enquanto aceita, mas podemos adicionar validação se necessário
      expect(resultado).toBeDefined();
    });
  });

  describe('Alertas e Dashboard', () => {
    it('deve identificar produtos com estoque baixo', async () => {
      // Reduzir estoque de alguns produtos
      const produtos = await prisma.produto.findMany();
      await prisma.produto.update({
        where: { id: produtos[0].id },
        data: { estoque: 5 } // Abaixo do limite
      });

      const dashboard = await estoqueService.obterDashboardEstoque();

      expect(dashboard.resumo.produtosEstoqueBaixo).toBeGreaterThan(0);
      expect(dashboard.alertas.estoqueBaixo).toBe(true);
    });

    it('deve gerar relatório de movimentações por período', async () => {
      const produto = TestHelpers.getCommonProduct();
      const farmaceutico = TestHelpers.getPharmacist();

      // Registrar algumas movimentações
      await estoqueService.registrarMovimentacao({
        produtoId: produto!.id,
        tipo: TipoMovimentacao.ENTRADA,
        quantidade: 20,
        motivo: 'Teste relatório',
        usuarioId: farmaceutico!.id
      });

      const dataInicio = new Date(Date.now() - 24 * 60 * 60 * 1000); // 1 dia atrás
      const dataFim = new Date();

      const relatorio = await estoqueService.gerarRelatorioMovimentacoes(
        dataInicio,
        dataFim
      );

      expect(relatorio.totalMovimentacoes).toBeGreaterThan(0);
      expect(relatorio.movimentacoes).toBeDefined();
      expect(relatorio.periodo.inicio).toBeDefined();
    });
  });

  describe('Rastreabilidade e Auditoria', () => {
    it('deve manter histórico completo de movimentações', async () => {
      const produto = TestHelpers.getCommonProduct();
      const farmaceutico = TestHelpers.getPharmacist();

      // Registrar várias movimentações
      await estoqueService.registrarMovimentacao({
        produtoId: produto!.id,
        tipo: TipoMovimentacao.ENTRADA,
        quantidade: 50,
        motivo: 'Compra',
        usuarioId: farmaceutico!.id
      });

      await estoqueService.registrarMovimentacao({
        produtoId: produto!.id,
        tipo: TipoMovimentacao.SAIDA,
        quantidade: 10,
        motivo: 'Venda',
        usuarioId: farmaceutico!.id
      });

      const movimentacoes = await estoqueService.listarMovimentacoes({
        produtoId: produto!.id
      });

      expect(movimentacoes.movimentacoes).toHaveLength(2);
      expect(movimentacoes.movimentacoes[0]).toHaveProperty('quantidadeAnterior');
      expect(movimentacoes.movimentacoes[0]).toHaveProperty('quantidadeAtual');
      expect(movimentacoes.movimentacoes[0]).toHaveProperty('usuario');
    });

    it('deve calcular saldo correto após múltiplas movimentações', async () => {
      const produto = TestHelpers.getCommonProduct();
      const farmaceutico = TestHelpers.getPharmacist();

      const estoqueInicial = 100;

      // Entrada: +30
      await estoqueService.registrarMovimentacao({
        produtoId: produto!.id,
        tipo: TipoMovimentacao.ENTRADA,
        quantidade: 30,
        motivo: 'Compra',
        usuarioId: farmaceutico!.id
      });

      // Saída: -20
      await estoqueService.registrarMovimentacao({
        produtoId: produto!.id,
        tipo: TipoMovimentacao.SAIDA,
        quantidade: 20,
        motivo: 'Venda',
        usuarioId: farmaceutico!.id
      });

      // Perda: -5
      await estoqueService.registrarMovimentacao({
        produtoId: produto!.id,
        tipo: TipoMovimentacao.PERDA,
        quantidade: 5,
        motivo: 'Avariado',
        usuarioId: farmaceutico!.id
      });

      const produtoFinal = await prisma.produto.findUnique({
        where: { id: produto!.id }
      });

      // 100 + 30 - 20 - 5 = 105
      expect(produtoFinal.estoque).toBe(105);
    });
  });
});