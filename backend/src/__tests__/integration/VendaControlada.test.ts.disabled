/**
 * Testes para Vendas Controladas - Regras Farmacêuticas
 * Validação de compliance com ANVISA, CFF e RDC
 */

import { TipoUsuario } from '@prisma/client';
import { VendaService } from '@/application/services/VendaService';
import { 
  setupTestDatabase, 
  seedTestData, 
  cleanupTestDatabase, 
  getTestPrisma, 
  TestHelpers 
} from '../setup/testDatabase';

describe('Vendas Controladas - Compliance Farmacêutico', () => {
  let vendaService: VendaService;
  let prisma: any;

  beforeAll(async () => {
    prisma = await setupTestDatabase();
    await seedTestData();
    vendaService = new VendaService();
  }, 30000);

  afterAll(async () => {
    await cleanupTestDatabase();
  }, 10000);

  beforeEach(async () => {
    // Limpar vendas antes de cada teste
    await prisma.itemVenda.deleteMany();
    await prisma.venda.deleteMany();
  });

  describe('Vendas de Medicamentos Controlados', () => {
    it('deve exigir farmacêutico para venda de psicotrópico', async () => {
      const produtoControlado = TestHelpers.getControlledProduct();
      const vendedor = TestHelpers.getSeller(); // Não é farmacêutico
      const farmaceutico = TestHelpers.getPharmacist();

      // Tentativa com vendedor comum (deve falhar)
      await expect(async () => {
        await vendaService.criarVenda({
          clienteId: 'cliente-teste',
          usuarioId: vendedor!.id,
          tipoVenda: 'controlada',
          itens: [{
            produtoId: produtoControlado!.id,
            quantidade: 1,
            precoUnitario: produtoControlado!.precoVenda
          }],
          observacoes: 'Receita B1 - Dr. Silva - CRM 12345'
        });
      }).rejects.toThrow('Venda de medicamento controlado requer farmacêutico responsável');

      // Venda com farmacêutico (deve funcionar)
      const vendaValida = await vendaService.criarVenda({
        clienteId: 'cliente-teste',
        usuarioId: farmaceutico!.id,
        tipoVenda: 'controlada',
        itens: [{
          produtoId: produtoControlado!.id,
          quantidade: 1,
          precoUnitario: produtoControlado!.precoVenda
        }],
        observacoes: 'Receita B1 - Dr. Silva - CRM 12345/SP - Paciente: João Silva'
      });

      expect(vendaValida).toBeDefined();
      expect(vendaValida.tipoVenda).toBe('controlada');
      expect(vendaValida.observacoes).toContain('CRM');
    });

    it('deve registrar dados completos para auditoria ANVISA', async () => {
      const produtoControlado = TestHelpers.getControlledProduct();
      const farmaceutico = TestHelpers.getPharmacist();

      const venda = await vendaService.criarVenda({
        clienteId: 'cliente-cpf',
        usuarioId: farmaceutico!.id,
        tipoVenda: 'controlada',
        itens: [{
          produtoId: produtoControlado!.id,
          quantidade: 2,
          precoUnitario: produtoControlado!.precoVenda
        }],
        observacoes: 'Receita B1 Nº 456789 - Dr. Maria Santos CRM 67890/SP - Paciente: Ana Silva - CPF: 123.456.789-00',
        dadosReceita: {
          numero: '456789',
          medico: 'Dr. Maria Santos',
          crm: '67890/SP',
          dataReceita: new Date(),
          validadeReceita: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 dias
        }
      });

      expect(venda).toBeDefined();
      expect(venda.dadosReceita).toBeDefined();
      expect(venda.dadosReceita.numero).toBe('456789');
      expect(venda.dadosReceita.crm).toBe('67890/SP');

      // Verificar rastreabilidade no banco
      const vendaBanco = await prisma.venda.findUnique({
        where: { id: venda.id },
        include: { 
          itens: { include: { produto: true } },
          usuario: true 
        }
      });

      expect(vendaBanco.usuario.tipo).toBe(TipoUsuario.FARMACEUTICO);
      expect(vendaBanco.observacoes).toContain('CPF:');
    });

    it('deve validar limite de quantidade para controlados', async () => {
      const produtoControlado = TestHelpers.getControlledProduct();
      const farmaceutico = TestHelpers.getPharmacist();

      // Tentativa de venda acima do limite (ex: mais de 2 caixas de Rivotril)
      await expect(async () => {
        await vendaService.criarVenda({
          clienteId: 'cliente-teste',
          usuarioId: farmaceutico!.id,
          tipoVenda: 'controlada',
          itens: [{
            produtoId: produtoControlado!.id,
            quantidade: 5, // Acima do limite permitido
            precoUnitario: produtoControlado!.precoVenda
          }],
          observacoes: 'Receita B1'
        });
      }).rejects.toThrow('Quantidade excede limite permitido para medicamento controlado');
    });

    it('deve verificar histórico do cliente para controlados', async () => {
      const produtoControlado = TestHelpers.getControlledProduct();
      const farmaceutico = TestHelpers.getPharmacist();
      const clienteId = 'cliente-historico';

      // Primeira compra (permitida)
      const primeiraVenda = await vendaService.criarVenda({
        clienteId,
        usuarioId: farmaceutico!.id,
        tipoVenda: 'controlada',
        itens: [{
          produtoId: produtoControlado!.id,
          quantidade: 1,
          precoUnitario: produtoControlado!.precoVenda
        }],
        observacoes: 'Receita B1 - Primeira compra'
      });

      expect(primeiraVenda).toBeDefined();

      // Segunda compra muito próxima (deve alertar)
      await expect(async () => {
        await vendaService.criarVenda({
          clienteId,
          usuarioId: farmaceutico!.id,
          tipoVenda: 'controlada',
          itens: [{
            produtoId: produtoControlado!.id,
            quantidade: 1,
            precoUnitario: produtoControlado!.precoVenda
          }],
          observacoes: 'Receita B1 - Segunda compra'
        });
      }).rejects.toThrow('Cliente possui compra recente do mesmo medicamento controlado');
    });
  });

  describe('Vendas com Receita Médica', () => {
    it('deve validar receita para antibióticos', async () => {
      const antibiotico = TestHelpers.findProductByCategory('Medicamentos')!;
      const farmaceutico = TestHelpers.getPharmacist();

      // Supondo que temos um produto antibiótico identificado
      if (antibiotico.nome.includes('Amoxicilina')) {
        const venda = await vendaService.criarVenda({
          clienteId: 'cliente-receita',
          usuarioId: farmaceutico!.id,
          tipoVenda: 'com_receita',
          itens: [{
            produtoId: antibiotico.id,
            quantidade: 1,
            precoUnitario: antibiotico.precoVenda
          }],
          observacoes: 'Receita simples - Dr. João - CRM 11111/SP',
          dadosReceita: {
            numero: 'RS789',
            medico: 'Dr. João',
            crm: '11111/SP',
            dataReceita: new Date()
          }
        });

        expect(venda).toBeDefined();
        expect(venda.tipoVenda).toBe('com_receita');
      }
    });

    it('deve rejeitar receita vencida', async () => {
      const produto = TestHelpers.getCommonProduct();
      const farmaceutico = TestHelpers.getPharmacist();

      await expect(async () => {
        await vendaService.criarVenda({
          clienteId: 'cliente-teste',
          usuarioId: farmaceutico!.id,
          tipoVenda: 'com_receita',
          itens: [{
            produtoId: produto!.id,
            quantidade: 1,
            precoUnitario: produto!.precoVenda
          }],
          dadosReceita: {
            numero: 'R123',
            medico: 'Dr. Teste',
            crm: '12345/SP',
            dataReceita: new Date(2023, 0, 1), // Data muito antiga
            validadeReceita: new Date(2023, 0, 31) // Vencida
          }
        });
      }).rejects.toThrow('Receita médica vencida');
    });
  });

  describe('Vendas Sem Receita (MIP)', () => {
    it('vendedor pode vender medicamentos isentos de prescrição', async () => {
      const produto = TestHelpers.getCommonProduct(); // Dipirona
      const vendedor = TestHelpers.getSeller();

      const venda = await vendaService.criarVenda({
        clienteId: 'cliente-balcao',
        usuarioId: vendedor!.id,
        tipoVenda: 'sem_receita',
        itens: [{
          produtoId: produto!.id,
          quantidade: 2,
          precoUnitario: produto!.precoVenda
        }],
        observacoes: 'Venda balcão - MIP'
      });

      expect(venda).toBeDefined();
      expect(venda.tipoVenda).toBe('sem_receita');
    });

    it('deve orientar sobre dosagem para MIPs', async () => {
      const produto = TestHelpers.getCommonProduct();
      const farmaceutico = TestHelpers.getPharmacist();

      const venda = await vendaService.criarVenda({
        clienteId: 'cliente-orientacao',
        usuarioId: farmaceutico!.id,
        tipoVenda: 'sem_receita',
        itens: [{
          produtoId: produto!.id,
          quantidade: 1,
          precoUnitario: produto!.precoVenda
        }],
        observacoes: 'Orientação farmacêutica: Tomar 500mg a cada 6 horas. Máximo 4 comprimidos/dia.'
      });

      expect(venda).toBeDefined();
      expect(venda.observacoes).toContain('Orientação farmacêutica');
    });
  });

  describe('Controle de Qualidade da Venda', () => {
    it('deve verificar interações medicamentosas', async () => {
      const farmaceutico = TestHelpers.getPharmacist();
      const produto1 = TestHelpers.getCommonProduct();
      const produto2 = TestHelpers.getControlledProduct();

      // Simular venda com potencial interação
      const venda = await vendaService.criarVenda({
        clienteId: 'cliente-interacao',
        usuarioId: farmaceutico!.id,
        tipoVenda: 'com_receita',
        itens: [
          {
            produtoId: produto1!.id,
            quantidade: 1,
            precoUnitario: produto1!.precoVenda
          },
          {
            produtoId: produto2!.id,
            quantidade: 1,
            precoUnitario: produto2!.precoVenda
          }
        ],
        observacoes: 'ATENÇÃO: Verificada potencial interação. Orientado espaçamento das doses.',
        alertaInteracao: true
      });

      expect(venda).toBeDefined();
      expect(venda.alertaInteracao).toBe(true);
      expect(venda.observacoes).toContain('interação');
    });

    it('deve calcular corretamente impostos farmacêuticos', async () => {
      const produto = TestHelpers.getCommonProduct();
      const farmaceutico = TestHelpers.getPharmacist();

      const venda = await vendaService.criarVenda({
        clienteId: 'cliente-imposto',
        usuarioId: farmaceutico!.id,
        tipoVenda: 'sem_receita',
        itens: [{
          produtoId: produto!.id,
          quantidade: 1,
          precoUnitario: produto!.precoVenda
        }]
      });

      expect(venda).toBeDefined();
      expect(venda.valorTotal).toBeGreaterThan(0);
      
      // Medicamentos têm ICMS diferenciado
      expect(venda.impostos).toBeDefined();
      expect(venda.impostos.icms).toBeLessThan(0.18); // Alíquota reduzida para medicamentos
    });
  });

  describe('Relatórios de Auditoria', () => {
    it('deve gerar relatório de vendas controladas para ANVISA', async () => {
      const produtoControlado = TestHelpers.getControlledProduct();
      const farmaceutico = TestHelpers.getPharmacist();

      // Criar algumas vendas controladas
      await vendaService.criarVenda({
        clienteId: 'cliente1',
        usuarioId: farmaceutico!.id,
        tipoVenda: 'controlada',
        itens: [{
          produtoId: produtoControlado!.id,
          quantidade: 1,
          precoUnitario: produtoControlado!.precoVenda
        }],
        observacoes: 'Receita B1 - Controle 001'
      });

      const relatorio = await vendaService.gerarRelatorioVendasControladas(
        new Date(Date.now() - 24 * 60 * 60 * 1000), // Ontem
        new Date() // Hoje
      );

      expect(relatorio).toBeDefined();
      expect(relatorio.vendasControladas).toHaveLength(1);
      expect(relatorio.vendasControladas[0]).toHaveProperty('dadosReceita');
      expect(relatorio.vendasControladas[0]).toHaveProperty('farmaceuticoResponsavel');
    });
  });
});