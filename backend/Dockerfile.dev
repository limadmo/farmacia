# Backend Development Dockerfile - Cache Optimized for Coolify
FROM node:22-bullseye-slim

WORKDIR /app

# Build arg para cache busting
ARG CACHE_BUST=1
ENV CACHE_BUST=${CACHE_BUST}

# Instalar dependências do sistema para Debian
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    openssl \
    libssl-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copiar package.json primeiro para melhor cache do npm
COPY package*.json ./

# Instalar dependências (cache layer separado)
RUN npm install

# Copiar arquivos do projeto (invalidará cache quando código mudar)
COPY . .

# CACHE BUSTING: Limpar apenas caches específicos do Prisma
RUN echo "Cache bust: ${CACHE_BUST}" && \
    rm -rf node_modules/.prisma/client/index.d.ts || true && \
    rm -rf node_modules/.prisma/client/schema.prisma || true

# Regenerar cliente Prisma sempre
RUN npx prisma generate

# DEBUG: Verificar migrations disponíveis
RUN echo "=== MIGRATIONS DISPONÍVEIS ===" && \
    ls -la prisma/migrations/ && \
    echo "=== SCHEMA PRISMA ===" && \
    head -50 prisma/schema.prisma && \
    echo "=== FIM DEBUG ==="

# Expor porta
EXPOSE 3001

# Script otimizado: reset DB + fresh migrations para evitar cache
CMD ["sh", "-c", "echo 'Backend starting (cache bust: ${CACHE_BUST})...' && sleep 10 && echo 'FORCE: Resetting database to ensure all migrations...' && npx prisma migrate reset --force && echo 'Database reset! All migrations applied.' && echo 'Regenerating Prisma client...' && npx prisma generate && echo 'Seeding database...' && npx prisma db seed && echo 'Database seeded!' && echo 'Starting server...' && npm run dev"]